[
  {
    "objectID": "olympic_athletes_and_medals.html",
    "href": "olympic_athletes_and_medals.html",
    "title": "Olympic Athletes",
    "section": "",
    "text": "The link to the TidyTuesday resource is: https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-08-06\nThe original data comes from: https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results/\n\n\n\n\n\n\n\n\n\nIn this analysis, I made a scatterplot of the height of the athletes from 1896 to 2016. The x-axis is the year ranging from 1896 to 2016, and the y-axis is the height of the athletes in centimeters. The red data points represent female athletes while the green data points represent male athletes."
  },
  {
    "objectID": "us_solar.html",
    "href": "us_solar.html",
    "title": "US Solar/Wind",
    "section": "",
    "text": "The link to the TidyTuesday resource is: https://github.com/rfordatascience/tidytuesday/tree/main/data/2022/2022-05-03\nThe original data comes from: https://emp.lbl.gov/utility-scale-solar\n\n\n\n\n\n\n\n\n\nIn this analysis, I made a scatterplot of the total capacity of different source types such as solar and wind from 2014 to 2020. The x-axis is the year ranging from 2014 to 2020, and the y-axis represents the total capacity of the energy sources in gigawatts. Different colors represent different energy types."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Max Feng",
    "section": "",
    "text": "Hi there! I’m Junshu Feng, and you can call me Max. I am a junior at Pomona College majoring in mathematics and minoring in data science. I am from Changzhou, China. It’s a relatively small city but it’s only one hour away from Shanghai by train. I love my neighborhoods because of the amazing restaurants nearby. I love music and sports. I also love to hang out with my friends. Check out my website if you want to know more about me!\nThe link to the Github repo is: https://github.com/maxfeng0722/maxfeng0722.github.io"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m Junshu Feng, and you can call me Max. I am a junior at Pomona College majoring in mathematics and minoring in data science. I am from Changzhou, China. It’s a relatively small city but it’s only one hour away from Shanghai by train. I love my neighborhoods because of the amazing restaurants nearby. I love music and sports. I also love to hang out with my friends."
  },
  {
    "objectID": "text_analysis.html",
    "href": "text_analysis.html",
    "title": "Text Analysis",
    "section": "",
    "text": "The link to the TidyTuesday resource is: https://github.com/rfordatascience/tidytuesday/blob/main/data/2021/2021-04-20/readme.md\nThe original data comes from: https://www.kaggle.com/datasets/shivamb/netflix-shows\nPart I: String Data Wrangling\n\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(stringr)\nlibrary(ggplot2)\nnetflix_titles &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2021/2021-04-20/netflix_titles.csv', show_col_types = FALSE)\nnew_netflix_titles &lt;- netflix_titles |&gt;\n  mutate(show_id_num = str_sub(show_id, 2, )) |&gt;\n  mutate(title_length = str_length(title)) |&gt;\n  mutate(us_show = str_detect(country, \"United States\"))\nlove_titles &lt;- netflix_titles |&gt;\n  filter(str_detect(title, \"\\\\bLove\\\\b\"))\nshows_at_2000s &lt;- netflix_titles |&gt;\n  filter(str_detect(release_year, \"200[0-9]$\"))\ncomedy_shows &lt;- netflix_titles |&gt;\n  filter(str_detect(listed_in, \"\\\\bComedies\\\\b\"))\ncomedies_only &lt;- comedy_shows |&gt;\n  filter(str_detect(listed_in, \"(?&lt;! )Comedies(?!,)\"))\n\nPart II: Distribution of Title Lengths of the Shows\n\nggplot(new_netflix_titles, aes(x = title_length)) +\n  geom_histogram(binwidth = 3) +\n  labs(title = \"distribution of title lengths of shows\", \n       x = \"length of titles\")\n\n\n\n\n\n\n\n\nIn this analysis, I made a histogram of the distribution of title lengths of the shows in Netflix. The x-axis is the value of different lengths, and the y-axis is the number of shows at a certain value of the title length. In general, the distribution is right-skewed. Most shows have the title length between 8-16 characters. Very few shows have the title length greater than 50 characters.\nPart III: Rating Systems of the Shows\n\nggplot(netflix_titles, aes(x = rating, fill = rating)) +\n  geom_bar() +\n  geom_label(stat = \"count\", aes(label = after_stat(count))) +\n  labs(title = \"distribution of the rating systems of shows\", \n       x = \"rating systems\")\n\n\n\n\n\n\n\n\nIn this analysis, I made a bar plot that analyzes the number of Netflix shows with different rating systems. The x-axis is the different rating systems and the y-axis is the number of shows that use a specific rating system. TV-MA has the most uses in shows, with 2863 shows that fall into this category. Very few shows use NC-17, TV-Y7-FV, and UR."
  },
  {
    "objectID": "simulation_analysis.html",
    "href": "simulation_analysis.html",
    "title": "Simulation Analysis",
    "section": "",
    "text": "In this project, I simulated the room draw process where students are randomly assigned an order to pick the rooms. I wanted to know the probability of a student Max getting a preferred room, given different number of students and number of rooms. To make the case simpler, I assumed that all the rooms are singles (so there are always more or an equal number of rooms than students). Also, Max has preferences for three rooms that are randomly generated. Everyone picks a random room and when it comes to Max’s turn, if any of the rooms that he prefers is still not occupied, then he gets to choose that room and therefore he gets the preferred room. Otherwise, he does not get the preferred room.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggrepel)\nlibrary(ggplot2)\nroom_draw &lt;- function(room, student, preference){\n  room_number &lt;- 1:room\n  my_order &lt;- sample(1:student, 1)\n  my_preferred_room &lt;- sample(room_number, preference, replace = FALSE)\n  earlier_picks &lt;- c()\n  if (my_order != 1) {\n    earlier_picks &lt;- sample(room_number, my_order - 1)\n  }\n  for (i in my_preferred_room){\n    if (!(i %in% earlier_picks)) {\n      return (TRUE)\n    }\n  }\n  return (FALSE)\n}\n\nsimulation &lt;- function(room, student, preference = 3, n = 1000){\n  return(sum(replicate(n, room_draw(room, student, preference))))\n}\n\ndf &lt;- expand_grid(student = seq(400, 1600, by = 50),\n                  ratio = seq(1.0, 2.0, by = 0.1),\n                  preference = c(3)) |&gt;\n  mutate(room = student * ratio)\n\nset.seed(47)\nsim_results &lt;- df |&gt;\n  mutate(\n    success = pmap(list(room, student, preference), \n                  ~ simulation(room = ..1, student = ..2, preference = ..3)),\n    prob = as.numeric(success) / 1000\n    )\n\nIn the code block above, I started with a function that simulates the room draw process. The output is TRUE if Max gets his preferred room and FALSE if he doesn’t. Then, I wrote a second function that does the simulation 1000 times given the study number and room number. I created a data frame that has four columns. The first column is the student counts from 400 to 1600 in steps of 50. Each student count has eleven rows. The second column is a ratio between room count and student count from 1.0 to 2.0 in steps of 0.1. The fourth column is the actual room count given the ratio and student count of each row. The third column is the number of preferred rooms, which is set to be 3. I ran the simulation 1000 times to each row of data and concluded with the probability of getting the preferred room in each scenario.\n\nggplot(sim_results, aes(x = student, y = prob)) +\n  geom_point() +\n  geom_text_repel(aes(label = room), size = 1.5) +\n  labs(\n    title = \"Room Draw Success Probability 1\",\n    x = \"Number of Students\",\n    y = \"Probability of Getting a Preferred Room\"\n  )\n\n\n\n\n\n\n\nggplot(sim_results, aes(x = room, y = prob)) +\n  geom_point() +\n  geom_text_repel(aes(label = student), size = 1.0) +\n  labs(\n    title = \"Room Draw Success Probability 2\",\n    x = \"Number of Rooms\",\n    y = \"Probability of Getting a Preferred Room\"\n  )\n\n\n\n\n\n\n\n\nIn this section, I made two scatterplots to visualize the results from the previous section. In the first plot, the x-axis is the number of students and the label of each point is the number of rooms. The y-axis is the probability of getting a preferred room in each scenario. In the second plot, the y-axis is the same variable, while the x-axis is the number of rooms and the label of each point is the number of students. According to the plots, when the number of students and the number of rooms are the same, the probability of getting a preferred room is around 0.75. When the number of rooms are twice the number of students, the probability of getting a preferred room increases to around 0.95. With a fixed room count, the more students there are, the less likely Max is getting a preferred room. With a fixed student count, the more rooms there are, the more likely Max is getting a preferred room.\nIn conclusion, in this simulation, I explored the probability of a student getting a preferred room with varying room count and student count. The effect of number of preferences on the probability can also be investigated using the functions I created. Also, the room count and the student count can also be easily manipulated to explore a specific scenario one wants."
  }
]